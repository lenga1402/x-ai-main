/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface XAIBOTInterface extends utils.Interface {
  functions: {
    "DEAD()": FunctionFragment;
    "_totalSupply()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buyfee()": FunctionFragment;
    "changeFees(uint256,uint256,uint256)": FunctionFragment;
    "changeLpPair(address)": FunctionFragment;
    "changeWallets(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "enableTrading()": FunctionFragment;
    "fee_denominator()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "isNoFeeWallet(address)": FunctionFragment;
    "isTradingEnabled()": FunctionFragment;
    "lpPair()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sellfee()": FunctionFragment;
    "setNoFeeWallet(address,bool)": FunctionFragment;
    "setPresaleAddress(address,bool)": FunctionFragment;
    "swapRouter()": FunctionFragment;
    "swapThreshold()": FunctionFragment;
    "symbol()": FunctionFragment;
    "toggleCanSwapFees(bool)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferfee()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEAD"
      | "_totalSupply"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "buyfee"
      | "changeFees"
      | "changeLpPair"
      | "changeWallets"
      | "decimals"
      | "enableTrading"
      | "fee_denominator"
      | "getOwner"
      | "isNoFeeWallet"
      | "isTradingEnabled"
      | "lpPair"
      | "name"
      | "owner"
      | "renounceOwnership"
      | "sellfee"
      | "setNoFeeWallet"
      | "setPresaleAddress"
      | "swapRouter"
      | "swapThreshold"
      | "symbol"
      | "toggleCanSwapFees"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "transferfee"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "DEAD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "buyfee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeFees",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeLpPair",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeWallets",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enableTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fee_denominator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isNoFeeWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTradingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lpPair", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sellfee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setNoFeeWallet",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPresaleAddress",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleCanSwapFees",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferfee",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "DEAD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyfee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeLpPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enableTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fee_denominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isNoFeeWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTradingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellfee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNoFeeWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPresaleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleCanSwapFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferfee",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "_changePair(address)": EventFragment;
    "_changeWallets(address)": EventFragment;
    "_enableTrading()": EventFragment;
    "_setPresaleAddress(address,bool)": EventFragment;
    "_toggleCanSwapFees(bool)": EventFragment;
    "updateFees(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "_changePair"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "_changeWallets"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "_enableTrading"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "_setPresaleAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "_toggleCanSwapFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "updateFees"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface _changePairEventObject {
  newLpPair: string;
}
export type _changePairEvent = TypedEvent<[string], _changePairEventObject>;

export type _changePairEventFilter = TypedEventFilter<_changePairEvent>;

export interface _changeWalletsEventObject {
  marketing: string;
}
export type _changeWalletsEvent = TypedEvent<
  [string],
  _changeWalletsEventObject
>;

export type _changeWalletsEventFilter = TypedEventFilter<_changeWalletsEvent>;

export interface _enableTradingEventObject {}
export type _enableTradingEvent = TypedEvent<[], _enableTradingEventObject>;

export type _enableTradingEventFilter = TypedEventFilter<_enableTradingEvent>;

export interface _setPresaleAddressEventObject {
  account: string;
  enabled: boolean;
}
export type _setPresaleAddressEvent = TypedEvent<
  [string, boolean],
  _setPresaleAddressEventObject
>;

export type _setPresaleAddressEventFilter =
  TypedEventFilter<_setPresaleAddressEvent>;

export interface _toggleCanSwapFeesEventObject {
  enabled: boolean;
}
export type _toggleCanSwapFeesEvent = TypedEvent<
  [boolean],
  _toggleCanSwapFeesEventObject
>;

export type _toggleCanSwapFeesEventFilter =
  TypedEventFilter<_toggleCanSwapFeesEvent>;

export interface updateFeesEventObject {
  buy: BigNumber;
  sell: BigNumber;
  newTransfer: BigNumber;
}
export type updateFeesEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  updateFeesEventObject
>;

export type updateFeesEventFilter = TypedEventFilter<updateFeesEvent>;

export interface XAIBOT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: XAIBOTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEAD(overrides?: CallOverrides): Promise<[string]>;

    _totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    buyfee(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeFees(
      buy: BigNumberish,
      sell: BigNumberish,
      newTransfer: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    changeLpPair(
      newPair: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    changeWallets(
      marketing: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    enableTrading(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    fee_denominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    isNoFeeWallet(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTradingEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    lpPair(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sellfee(overrides?: CallOverrides): Promise<[BigNumber]>;

    setNoFeeWallet(
      account: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPresaleAddress(
      presale: string,
      yesno: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;

    swapThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    toggleCanSwapFees(
      yesno: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferfee(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DEAD(overrides?: CallOverrides): Promise<string>;

  _totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    holder: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  buyfee(overrides?: CallOverrides): Promise<BigNumber>;

  changeFees(
    buy: BigNumberish,
    sell: BigNumberish,
    newTransfer: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  changeLpPair(
    newPair: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  changeWallets(
    marketing: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  enableTrading(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  fee_denominator(overrides?: CallOverrides): Promise<BigNumber>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  isNoFeeWallet(account: string, overrides?: CallOverrides): Promise<boolean>;

  isTradingEnabled(overrides?: CallOverrides): Promise<boolean>;

  lpPair(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sellfee(overrides?: CallOverrides): Promise<BigNumber>;

  setNoFeeWallet(
    account: string,
    enabled: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPresaleAddress(
    presale: string,
    yesno: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  swapThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  toggleCanSwapFees(
    yesno: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferfee(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DEAD(overrides?: CallOverrides): Promise<string>;

    _totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyfee(overrides?: CallOverrides): Promise<BigNumber>;

    changeFees(
      buy: BigNumberish,
      sell: BigNumberish,
      newTransfer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeLpPair(newPair: string, overrides?: CallOverrides): Promise<void>;

    changeWallets(marketing: string, overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    enableTrading(overrides?: CallOverrides): Promise<void>;

    fee_denominator(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    isNoFeeWallet(account: string, overrides?: CallOverrides): Promise<boolean>;

    isTradingEnabled(overrides?: CallOverrides): Promise<boolean>;

    lpPair(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sellfee(overrides?: CallOverrides): Promise<BigNumber>;

    setNoFeeWallet(
      account: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPresaleAddress(
      presale: string,
      yesno: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    swapRouter(overrides?: CallOverrides): Promise<string>;

    swapThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    toggleCanSwapFees(yesno: boolean, overrides?: CallOverrides): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferfee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "_changePair(address)"(newLpPair?: null): _changePairEventFilter;
    _changePair(newLpPair?: null): _changePairEventFilter;

    "_changeWallets(address)"(marketing?: null): _changeWalletsEventFilter;
    _changeWallets(marketing?: null): _changeWalletsEventFilter;

    "_enableTrading()"(): _enableTradingEventFilter;
    _enableTrading(): _enableTradingEventFilter;

    "_setPresaleAddress(address,bool)"(
      account?: null,
      enabled?: null
    ): _setPresaleAddressEventFilter;
    _setPresaleAddress(
      account?: null,
      enabled?: null
    ): _setPresaleAddressEventFilter;

    "_toggleCanSwapFees(bool)"(enabled?: null): _toggleCanSwapFeesEventFilter;
    _toggleCanSwapFees(enabled?: null): _toggleCanSwapFeesEventFilter;

    "updateFees(uint256,uint256,uint256)"(
      buy?: null,
      sell?: null,
      newTransfer?: null
    ): updateFeesEventFilter;
    updateFees(
      buy?: null,
      sell?: null,
      newTransfer?: null
    ): updateFeesEventFilter;
  };

  estimateGas: {
    DEAD(overrides?: CallOverrides): Promise<BigNumber>;

    _totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyfee(overrides?: CallOverrides): Promise<BigNumber>;

    changeFees(
      buy: BigNumberish,
      sell: BigNumberish,
      newTransfer: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    changeLpPair(
      newPair: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    changeWallets(
      marketing: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    enableTrading(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    fee_denominator(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    isNoFeeWallet(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTradingEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    lpPair(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sellfee(overrides?: CallOverrides): Promise<BigNumber>;

    setNoFeeWallet(
      account: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPresaleAddress(
      presale: string,
      yesno: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    swapThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    toggleCanSwapFees(
      yesno: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferfee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEAD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyfee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeFees(
      buy: BigNumberish,
      sell: BigNumberish,
      newTransfer: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    changeLpPair(
      newPair: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    changeWallets(
      marketing: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enableTrading(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    fee_denominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isNoFeeWallet(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTradingEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sellfee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setNoFeeWallet(
      account: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPresaleAddress(
      presale: string,
      yesno: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleCanSwapFees(
      yesno: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferfee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
