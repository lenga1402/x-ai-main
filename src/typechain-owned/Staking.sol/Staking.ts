/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace Staking {
  export type UserStakeHistoryStruct = {
    user: string;
    amount: BigNumberish;
    created_at: BigNumberish;
    history_type: BigNumberish;
  };

  export type UserStakeHistoryStructOutput = [
    string,
    BigNumber,
    BigNumber,
    number
  ] & {
    user: string;
    amount: BigNumber;
    created_at: BigNumber;
    history_type: number;
  };
}

export interface StakingInterface extends utils.Interface {
  functions: {
    "FeeReceiver()": FunctionFragment;
    "WAITING_TIME_TO_UNSTAKE()": FunctionFragment;
    "addStake(uint256,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "earned(address)": FunctionFragment;
    "getAllUserStakeHistory()": FunctionFragment;
    "getUserStakeIdList(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingReward(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setTokenStaking(address)": FunctionFragment;
    "stake(uint256,uint256)": FunctionFragment;
    "stakeFee()": FunctionFragment;
    "stakes(uint256)": FunctionFragment;
    "tokenStaking()": FunctionFragment;
    "totalStake()": FunctionFragment;
    "totalStakedAmount()": FunctionFragment;
    "totalUserStake()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstakeFee()": FunctionFragment;
    "updateFeeReceiver(address)": FunctionFragment;
    "updateStake(uint256,uint256,uint256)": FunctionFragment;
    "updateStakeFee(uint256)": FunctionFragment;
    "updateUnstakeFee(uint256)": FunctionFragment;
    "userStakes(uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FeeReceiver"
      | "WAITING_TIME_TO_UNSTAKE"
      | "addStake"
      | "balanceOf"
      | "claim"
      | "earned"
      | "getAllUserStakeHistory"
      | "getUserStakeIdList"
      | "owner"
      | "pendingReward"
      | "renounceOwnership"
      | "setTokenStaking"
      | "stake"
      | "stakeFee"
      | "stakes"
      | "tokenStaking"
      | "totalStake"
      | "totalStakedAmount"
      | "totalUserStake"
      | "transferOwnership"
      | "unstakeFee"
      | "updateFeeReceiver"
      | "updateStake"
      | "updateStakeFee"
      | "updateUnstakeFee"
      | "userStakes"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FeeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WAITING_TIME_TO_UNSTAKE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addStake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "earned", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAllUserStakeHistory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakeIdList",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenStaking",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stakeFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUserStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeReceiver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStake",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStakeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUnstakeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userStakes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "FeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WAITING_TIME_TO_UNSTAKE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllUserStakeHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakeIdList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStakedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUserStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstakeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStakeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUnstakeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userStakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Claimed(uint256)": EventFragment;
    "NewStake(uint256)": EventFragment;
    "NewStaking(uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdatedStake(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewStake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewStaking"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedStake"): EventFragment;
}

export interface ClaimedEventObject {
  id: BigNumber;
}
export type ClaimedEvent = TypedEvent<[BigNumber], ClaimedEventObject>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface NewStakeEventObject {
  stakeId: BigNumber;
}
export type NewStakeEvent = TypedEvent<[BigNumber], NewStakeEventObject>;

export type NewStakeEventFilter = TypedEventFilter<NewStakeEvent>;

export interface NewStakingEventObject {
  id: BigNumber;
  stakinger: string;
}
export type NewStakingEvent = TypedEvent<
  [BigNumber, string],
  NewStakingEventObject
>;

export type NewStakingEventFilter = TypedEventFilter<NewStakingEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpdatedStakeEventObject {
  stakeId: BigNumber;
}
export type UpdatedStakeEvent = TypedEvent<
  [BigNumber],
  UpdatedStakeEventObject
>;

export type UpdatedStakeEventFilter = TypedEventFilter<UpdatedStakeEvent>;

export interface Staking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FeeReceiver(overrides?: CallOverrides): Promise<[string]>;

    WAITING_TIME_TO_UNSTAKE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addStake(
      _duration: BigNumberish,
      _apy: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    earned(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllUserStakeHistory(
      overrides?: CallOverrides
    ): Promise<[Staking.UserStakeHistoryStructOutput[]]>;

    getUserStakeIdList(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingReward(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTokenStaking(
      _tokenStaking: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stake(
      _stakeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stakeFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { duration: BigNumber; apy: BigNumber }
    >;

    tokenStaking(overrides?: CallOverrides): Promise<[string]>;

    totalStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStakedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalUserStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unstakeFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateFeeReceiver(
      _newFeeReceiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateStake(
      _duration: BigNumberish,
      _apy: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateStakeFee(
      _newStakeFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateUnstakeFee(
      _newUnstakeFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    userStakes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        staker: string;
        stakeId: BigNumber;
        amount: BigNumber;
        start: BigNumber;
        claimTime: BigNumber;
        claimed: boolean;
      }
    >;

    withdraw(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  FeeReceiver(overrides?: CallOverrides): Promise<string>;

  WAITING_TIME_TO_UNSTAKE(overrides?: CallOverrides): Promise<BigNumber>;

  addStake(
    _duration: BigNumberish,
    _apy: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  earned(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  getAllUserStakeHistory(
    overrides?: CallOverrides
  ): Promise<Staking.UserStakeHistoryStructOutput[]>;

  getUserStakeIdList(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingReward(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTokenStaking(
    _tokenStaking: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stake(
    _stakeId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stakeFee(overrides?: CallOverrides): Promise<BigNumber>;

  stakes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { duration: BigNumber; apy: BigNumber }>;

  tokenStaking(overrides?: CallOverrides): Promise<string>;

  totalStake(overrides?: CallOverrides): Promise<BigNumber>;

  totalStakedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalUserStake(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unstakeFee(overrides?: CallOverrides): Promise<BigNumber>;

  updateFeeReceiver(
    _newFeeReceiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateStake(
    _duration: BigNumberish,
    _apy: BigNumberish,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateStakeFee(
    _newStakeFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateUnstakeFee(
    _newUnstakeFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  userStakes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      staker: string;
      stakeId: BigNumber;
      amount: BigNumber;
      start: BigNumber;
      claimTime: BigNumber;
      claimed: boolean;
    }
  >;

  withdraw(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    FeeReceiver(overrides?: CallOverrides): Promise<string>;

    WAITING_TIME_TO_UNSTAKE(overrides?: CallOverrides): Promise<BigNumber>;

    addStake(
      _duration: BigNumberish,
      _apy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claim(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    earned(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAllUserStakeHistory(
      overrides?: CallOverrides
    ): Promise<Staking.UserStakeHistoryStructOutput[]>;

    getUserStakeIdList(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingReward(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setTokenStaking(
      _tokenStaking: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      _stakeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeFee(overrides?: CallOverrides): Promise<BigNumber>;

    stakes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { duration: BigNumber; apy: BigNumber }
    >;

    tokenStaking(overrides?: CallOverrides): Promise<string>;

    totalStake(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalUserStake(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeFee(overrides?: CallOverrides): Promise<BigNumber>;

    updateFeeReceiver(
      _newFeeReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStake(
      _duration: BigNumberish,
      _apy: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStakeFee(
      _newStakeFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUnstakeFee(
      _newUnstakeFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userStakes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        staker: string;
        stakeId: BigNumber;
        amount: BigNumber;
        start: BigNumber;
        claimTime: BigNumber;
        claimed: boolean;
      }
    >;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Claimed(uint256)"(id?: BigNumberish | null): ClaimedEventFilter;
    Claimed(id?: BigNumberish | null): ClaimedEventFilter;

    "NewStake(uint256)"(stakeId?: BigNumberish | null): NewStakeEventFilter;
    NewStake(stakeId?: BigNumberish | null): NewStakeEventFilter;

    "NewStaking(uint256,address)"(
      id?: BigNumberish | null,
      stakinger?: string | null
    ): NewStakingEventFilter;
    NewStaking(
      id?: BigNumberish | null,
      stakinger?: string | null
    ): NewStakingEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "UpdatedStake(uint256)"(
      stakeId?: BigNumberish | null
    ): UpdatedStakeEventFilter;
    UpdatedStake(stakeId?: BigNumberish | null): UpdatedStakeEventFilter;
  };

  estimateGas: {
    FeeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    WAITING_TIME_TO_UNSTAKE(overrides?: CallOverrides): Promise<BigNumber>;

    addStake(
      _duration: BigNumberish,
      _apy: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    earned(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAllUserStakeHistory(overrides?: CallOverrides): Promise<BigNumber>;

    getUserStakeIdList(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingReward(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTokenStaking(
      _tokenStaking: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stake(
      _stakeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stakeFee(overrides?: CallOverrides): Promise<BigNumber>;

    stakes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    tokenStaking(overrides?: CallOverrides): Promise<BigNumber>;

    totalStake(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalUserStake(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unstakeFee(overrides?: CallOverrides): Promise<BigNumber>;

    updateFeeReceiver(
      _newFeeReceiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateStake(
      _duration: BigNumberish,
      _apy: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateStakeFee(
      _newStakeFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateUnstakeFee(
      _newUnstakeFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    userStakes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    FeeReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WAITING_TIME_TO_UNSTAKE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addStake(
      _duration: BigNumberish,
      _apy: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    earned(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllUserStakeHistory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStakeIdList(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingReward(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTokenStaking(
      _tokenStaking: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stake(
      _stakeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stakeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalUserStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unstakeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateFeeReceiver(
      _newFeeReceiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateStake(
      _duration: BigNumberish,
      _apy: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateStakeFee(
      _newStakeFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateUnstakeFee(
      _newUnstakeFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userStakes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
